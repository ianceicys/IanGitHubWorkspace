// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace XamarinOptionsAutomation
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        #region Properties
        public UIStartPageMicrosoftViWindow UIStartPageMicrosoftViWindow
        {
            get
            {
                if ((this.mUIStartPageMicrosoftViWindow == null))
                {
                    this.mUIStartPageMicrosoftViWindow = new UIStartPageMicrosoftViWindow();
                }
                return this.mUIStartPageMicrosoftViWindow;
            }
        }
        
        public UIOptionsWindow UIOptionsWindow
        {
            get
            {
                if ((this.mUIOptionsWindow == null))
                {
                    this.mUIOptionsWindow = new UIOptionsWindow();
                }
                return this.mUIOptionsWindow;
            }
        }
        
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UISelectAndroidSDKWindow UISelectAndroidSDKWindow
        {
            get
            {
                if ((this.mUISelectAndroidSDKWindow == null))
                {
                    this.mUISelectAndroidSDKWindow = new UISelectAndroidSDKWindow();
                }
                return this.mUISelectAndroidSDKWindow;
            }
        }
        
        public UIInvalidSDKWindow UIInvalidSDKWindow
        {
            get
            {
                if ((this.mUIInvalidSDKWindow == null))
                {
                    this.mUIInvalidSDKWindow = new UIInvalidSDKWindow();
                }
                return this.mUIInvalidSDKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIStartPageMicrosoftViWindow mUIStartPageMicrosoftViWindow;
        
        private UIOptionsWindow mUIOptionsWindow;
        
        private UIOKWindow1 mUIOKWindow;
        
        private UISelectAndroidSDKWindow mUISelectAndroidSDKWindow;
        
        private UIInvalidSDKWindow mUIInvalidSDKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIStartPageMicrosoftViWindow : WpfWindow
    {
        
        public UIStartPageMicrosoftViWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Start Page - Microsoft Visual Studio";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Start Page - Microsoft Visual Studio");
            #endregion
        }
        
        #region Properties
        public UIMenuBarMenuBar UIMenuBarMenuBar
        {
            get
            {
                if ((this.mUIMenuBarMenuBar == null))
                {
                    this.mUIMenuBarMenuBar = new UIMenuBarMenuBar(this);
                }
                return this.mUIMenuBarMenuBar;
            }
        }
        
        public UIStartPageMicrosoftViTitleBar UIStartPageMicrosoftViTitleBar
        {
            get
            {
                if ((this.mUIStartPageMicrosoftViTitleBar == null))
                {
                    this.mUIStartPageMicrosoftViTitleBar = new UIStartPageMicrosoftViTitleBar(this);
                }
                return this.mUIStartPageMicrosoftViTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuBarMenuBar mUIMenuBarMenuBar;
        
        private UIStartPageMicrosoftViTitleBar mUIStartPageMicrosoftViTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuBarMenuBar : WpfControl
    {
        
        public UIMenuBarMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "MenuBar";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MenuBar";
            this.WindowTitles.Add("Start Page - Microsoft Visual Studio");
            #endregion
        }
        
        #region Properties
        public UIToolsMenuItem UIToolsMenuItem
        {
            get
            {
                if ((this.mUIToolsMenuItem == null))
                {
                    this.mUIToolsMenuItem = new UIToolsMenuItem(this);
                }
                return this.mUIToolsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIToolsMenuItem mUIToolsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIToolsMenuItem : WpfMenuItem
    {
        
        public UIToolsMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Tools";
            this.WindowTitles.Add("Start Page - Microsoft Visual Studio");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIOptionsMenuItem
        {
            get
            {
                if ((this.mUIOptionsMenuItem == null))
                {
                    this.mUIOptionsMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIOptionsMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Options...";
                    this.mUIOptionsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOptionsMenuItem.WindowTitles.Add("Start Page - Microsoft Visual Studio");
                    #endregion
                }
                return this.mUIOptionsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIOptionsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIStartPageMicrosoftViTitleBar : WpfTitleBar
    {
        
        public UIStartPageMicrosoftViTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTitleBar.PropertyNames.AutomationId] = "TitleBar";
            this.WindowTitles.Add("Start Page - Microsoft Visual Studio");
            #endregion
        }
        
        #region Properties
        public WpfButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WpfButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Start Page - Microsoft Visual Studio");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOptionsWindow : WinWindow
    {
        
        public UIOptionsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Options";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIOptionsTitleBar
        {
            get
            {
                if ((this.mUIOptionsTitleBar == null))
                {
                    this.mUIOptionsTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIOptionsTitleBar.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUIOptionsTitleBar;
            }
        }
        
        public UIOptionsDialog UIOptionsDialog
        {
            get
            {
                if ((this.mUIOptionsDialog == null))
                {
                    this.mUIOptionsDialog = new UIOptionsDialog(this);
                }
                return this.mUIOptionsDialog;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIAndroidSDKLocationWindow UIAndroidSDKLocationWindow
        {
            get
            {
                if ((this.mUIAndroidSDKLocationWindow == null))
                {
                    this.mUIAndroidSDKLocationWindow = new UIAndroidSDKLocationWindow(this);
                }
                return this.mUIAndroidSDKLocationWindow;
            }
        }
        
        public UICUsersIanAppDataLocaWindow UICUsersIanAppDataLocaWindow
        {
            get
            {
                if ((this.mUICUsersIanAppDataLocaWindow == null))
                {
                    this.mUICUsersIanAppDataLocaWindow = new UICUsersIanAppDataLocaWindow(this);
                }
                return this.mUICUsersIanAppDataLocaWindow;
            }
        }
        
        public UIChangeText UIChangeText
        {
            get
            {
                if ((this.mUIChangeText == null))
                {
                    this.mUIChangeText = new UIChangeText(this);
                }
                return this.mUIChangeText;
            }
        }
        
        public UIAndroidNDKLocationWindow UIAndroidNDKLocationWindow
        {
            get
            {
                if ((this.mUIAndroidNDKLocationWindow == null))
                {
                    this.mUIAndroidNDKLocationWindow = new UIAndroidNDKLocationWindow(this);
                }
                return this.mUIAndroidNDKLocationWindow;
            }
        }
        
        public UICUsersIanDocumentsAnWindow UICUsersIanDocumentsAnWindow
        {
            get
            {
                if ((this.mUICUsersIanDocumentsAnWindow == null))
                {
                    this.mUICUsersIanDocumentsAnWindow = new UICUsersIanDocumentsAnWindow(this);
                }
                return this.mUICUsersIanDocumentsAnWindow;
            }
        }
        
        public UIEmulatorDeviceDebuggWindow UIEmulatorDeviceDebuggWindow
        {
            get
            {
                if ((this.mUIEmulatorDeviceDebuggWindow == null))
                {
                    this.mUIEmulatorDeviceDebuggWindow = new UIEmulatorDeviceDebuggWindow(this);
                }
                return this.mUIEmulatorDeviceDebuggWindow;
            }
        }
        
        public UIPreserveapplicationdWindow UIPreserveapplicationdWindow
        {
            get
            {
                if ((this.mUIPreserveapplicationdWindow == null))
                {
                    this.mUIPreserveapplicationdWindow = new UIPreserveapplicationdWindow(this);
                }
                return this.mUIPreserveapplicationdWindow;
            }
        }
        
        public UIProvidedebugsymbolsfWindow UIProvidedebugsymbolsfWindow
        {
            get
            {
                if ((this.mUIProvidedebugsymbolsfWindow == null))
                {
                    this.mUIProvidedebugsymbolsfWindow = new UIProvidedebugsymbolsfWindow(this);
                }
                return this.mUIProvidedebugsymbolsfWindow;
            }
        }
        
        public UIAdditionalEmulatorLaWindow UIAdditionalEmulatorLaWindow
        {
            get
            {
                if ((this.mUIAdditionalEmulatorLaWindow == null))
                {
                    this.mUIAdditionalEmulatorLaWindow = new UIAdditionalEmulatorLaWindow(this);
                }
                return this.mUIAdditionalEmulatorLaWindow;
            }
        }
        
        public UIEmulatorArgumentsWindow UIEmulatorArgumentsWindow
        {
            get
            {
                if ((this.mUIEmulatorArgumentsWindow == null))
                {
                    this.mUIEmulatorArgumentsWindow = new UIEmulatorArgumentsWindow(this);
                }
                return this.mUIEmulatorArgumentsWindow;
            }
        }
        
        public UIXamarinforVisualStudWindow UIXamarinforVisualStudWindow
        {
            get
            {
                if ((this.mUIXamarinforVisualStudWindow == null))
                {
                    this.mUIXamarinforVisualStudWindow = new UIXamarinforVisualStudWindow(this);
                }
                return this.mUIXamarinforVisualStudWindow;
            }
        }
        
        public UINotifymeaboutWindow UINotifymeaboutWindow
        {
            get
            {
                if ((this.mUINotifymeaboutWindow == null))
                {
                    this.mUINotifymeaboutWindow = new UINotifymeaboutWindow(this);
                }
                return this.mUINotifymeaboutWindow;
            }
        }
        
        public UICheckUpdatesLevelWindow UICheckUpdatesLevelWindow
        {
            get
            {
                if ((this.mUICheckUpdatesLevelWindow == null))
                {
                    this.mUICheckUpdatesLevelWindow = new UICheckUpdatesLevelWindow(this);
                }
                return this.mUICheckUpdatesLevelWindow;
            }
        }
        
        public UICheckNowText UICheckNowText
        {
            get
            {
                if ((this.mUICheckNowText == null))
                {
                    this.mUICheckNowText = new UICheckNowText(this);
                }
                return this.mUICheckNowText;
            }
        }
        
        public UINohostconnectedWindow UINohostconnectedWindow
        {
            get
            {
                if ((this.mUINohostconnectedWindow == null))
                {
                    this.mUINohostconnectedWindow = new UINohostconnectedWindow(this);
                }
                return this.mUINohostconnectedWindow;
            }
        }
        
        public UIFindMacBuildHostWindow UIFindMacBuildHostWindow
        {
            get
            {
                if ((this.mUIFindMacBuildHostWindow == null))
                {
                    this.mUIFindMacBuildHostWindow = new UIFindMacBuildHostWindow(this);
                }
                return this.mUIFindMacBuildHostWindow;
            }
        }
        
        public UISDKSynchronizationWindow UISDKSynchronizationWindow
        {
            get
            {
                if ((this.mUISDKSynchronizationWindow == null))
                {
                    this.mUISDKSynchronizationWindow = new UISDKSynchronizationWindow(this);
                }
                return this.mUISDKSynchronizationWindow;
            }
        }
        
        public UIAppleSDKWindow UIAppleSDKWindow
        {
            get
            {
                if ((this.mUIAppleSDKWindow == null))
                {
                    this.mUIAppleSDKWindow = new UIAppleSDKWindow(this);
                }
                return this.mUIAppleSDKWindow;
            }
        }
        
        public UIXcodepathegApplicatiWindow UIXcodepathegApplicatiWindow
        {
            get
            {
                if ((this.mUIXcodepathegApplicatiWindow == null))
                {
                    this.mUIXcodepathegApplicatiWindow = new UIXcodepathegApplicatiWindow(this);
                }
                return this.mUIXcodepathegApplicatiWindow;
            }
        }
        
        public UITxtXcodeHintWindow UITxtXcodeHintWindow
        {
            get
            {
                if ((this.mUITxtXcodeHintWindow == null))
                {
                    this.mUITxtXcodeHintWindow = new UITxtXcodeHintWindow(this);
                }
                return this.mUITxtXcodeHintWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UITxtXcodeHintWindow1 UITxtXcodeHintWindow1
        {
            get
            {
                if ((this.mUITxtXcodeHintWindow1 == null))
                {
                    this.mUITxtXcodeHintWindow1 = new UITxtXcodeHintWindow1(this);
                }
                return this.mUITxtXcodeHintWindow1;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIOptionsTitleBar;
        
        private UIOptionsDialog mUIOptionsDialog;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIAndroidSDKLocationWindow mUIAndroidSDKLocationWindow;
        
        private UICUsersIanAppDataLocaWindow mUICUsersIanAppDataLocaWindow;
        
        private UIChangeText mUIChangeText;
        
        private UIAndroidNDKLocationWindow mUIAndroidNDKLocationWindow;
        
        private UICUsersIanDocumentsAnWindow mUICUsersIanDocumentsAnWindow;
        
        private UIEmulatorDeviceDebuggWindow mUIEmulatorDeviceDebuggWindow;
        
        private UIPreserveapplicationdWindow mUIPreserveapplicationdWindow;
        
        private UIProvidedebugsymbolsfWindow mUIProvidedebugsymbolsfWindow;
        
        private UIAdditionalEmulatorLaWindow mUIAdditionalEmulatorLaWindow;
        
        private UIEmulatorArgumentsWindow mUIEmulatorArgumentsWindow;
        
        private UIXamarinforVisualStudWindow mUIXamarinforVisualStudWindow;
        
        private UINotifymeaboutWindow mUINotifymeaboutWindow;
        
        private UICheckUpdatesLevelWindow mUICheckUpdatesLevelWindow;
        
        private UICheckNowText mUICheckNowText;
        
        private UINohostconnectedWindow mUINohostconnectedWindow;
        
        private UIFindMacBuildHostWindow mUIFindMacBuildHostWindow;
        
        private UISDKSynchronizationWindow mUISDKSynchronizationWindow;
        
        private UIAppleSDKWindow mUIAppleSDKWindow;
        
        private UIXcodepathegApplicatiWindow mUIXcodepathegApplicatiWindow;
        
        private UITxtXcodeHintWindow mUITxtXcodeHintWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UICancelWindow mUICancelWindow;
        
        private UITxtXcodeHintWindow1 mUITxtXcodeHintWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOptionsDialog : WinControl
    {
        
        public UIOptionsDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Options";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public UISearchControlCustom UISearchControlCustom
        {
            get
            {
                if ((this.mUISearchControlCustom == null))
                {
                    this.mUISearchControlCustom = new UISearchControlCustom(this);
                }
                return this.mUISearchControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UISearchControlCustom mUISearchControlCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISearchControlCustom : WpfCustom
    {
        
        public UISearchControlCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Search Control";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WpfEdit UISearchOptionsCtrlEdit
        {
            get
            {
                if ((this.mUISearchOptionsCtrlEdit == null))
                {
                    this.mUISearchOptionsCtrlEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUISearchOptionsCtrlEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PART_SearchBox";
                    this.mUISearchOptionsCtrlEdit.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUISearchOptionsCtrlEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUISearchOptionsCtrlEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4801";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public UIXamarinTreeItem UIXamarinTreeItem
        {
            get
            {
                if ((this.mUIXamarinTreeItem == null))
                {
                    this.mUIXamarinTreeItem = new UIXamarinTreeItem(this);
                }
                return this.mUIXamarinTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIXamarinTreeItem mUIXamarinTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIXamarinTreeItem : WinTreeItem
    {
        
        public UIXamarinTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Xamarin";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIAndroidSettingsTreeItem
        {
            get
            {
                if ((this.mUIAndroidSettingsTreeItem == null))
                {
                    this.mUIAndroidSettingsTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIAndroidSettingsTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Android Settings";
                    this.mUIAndroidSettingsTreeItem.SearchProperties["Value"] = "1";
                    this.mUIAndroidSettingsTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAndroidSettingsTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIAndroidSettingsTreeItem.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUIAndroidSettingsTreeItem;
            }
        }
        
        public WinTreeItem UIIOSSettingsTreeItem
        {
            get
            {
                if ((this.mUIIOSSettingsTreeItem == null))
                {
                    this.mUIIOSSettingsTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIIOSSettingsTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "iOS Settings";
                    this.mUIIOSSettingsTreeItem.SearchProperties["Value"] = "1";
                    this.mUIIOSSettingsTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIIOSSettingsTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIIOSSettingsTreeItem.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUIIOSSettingsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIAndroidSettingsTreeItem;
        
        private WinTreeItem mUIIOSSettingsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIAndroidSDKLocationWindow : WinWindow
    {
        
        public UIAndroidSDKLocationWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label1";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinText UIAndroidSDKLocationText
        {
            get
            {
                if ((this.mUIAndroidSDKLocationText == null))
                {
                    this.mUIAndroidSDKLocationText = new WinText(this);
                    #region Search Criteria
                    this.mUIAndroidSDKLocationText.SearchProperties[WinText.PropertyNames.Name] = "Android SDK Location";
                    this.mUIAndroidSDKLocationText.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUIAndroidSDKLocationText;
            }
        }
        
        public WinText UIMacBuildHostText
        {
            get
            {
                if ((this.mUIMacBuildHostText == null))
                {
                    this.mUIMacBuildHostText = new WinText(this);
                    #region Search Criteria
                    this.mUIMacBuildHostText.SearchProperties[WinText.PropertyNames.Name] = "Mac Build Host";
                    this.mUIMacBuildHostText.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUIMacBuildHostText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIAndroidSDKLocationText;
        
        private WinText mUIMacBuildHostText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICUsersIanAppDataLocaWindow : WinWindow
    {
        
        public UICUsersIanAppDataLocaWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sdkLocation";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinText UICUsersIanAppDataLocaText
        {
            get
            {
                if ((this.mUICUsersIanAppDataLocaText == null))
                {
                    this.mUICUsersIanAppDataLocaText = new WinText(this);
                    #region Search Criteria
                    this.mUICUsersIanAppDataLocaText.SearchProperties[WinText.PropertyNames.Name] = "C:\\Users\\Ian\\AppData\\Local\\Android\\android-sdk";
                    this.mUICUsersIanAppDataLocaText.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUICUsersIanAppDataLocaText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUICUsersIanAppDataLocaText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIChangeText : WinText
    {
        
        public UIChangeText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Change";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinHyperlink UIChangeHyperlink
        {
            get
            {
                if ((this.mUIChangeHyperlink == null))
                {
                    this.mUIChangeHyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUIChangeHyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "Change";
                    this.mUIChangeHyperlink.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUIChangeHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mUIChangeHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIAndroidNDKLocationWindow : WinWindow
    {
        
        public UIAndroidNDKLocationWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label7";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinText UIAndroidNDKLocationText
        {
            get
            {
                if ((this.mUIAndroidNDKLocationText == null))
                {
                    this.mUIAndroidNDKLocationText = new WinText(this);
                    #region Search Criteria
                    this.mUIAndroidNDKLocationText.SearchProperties[WinText.PropertyNames.Name] = "Android NDK Location";
                    this.mUIAndroidNDKLocationText.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUIAndroidNDKLocationText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIAndroidNDKLocationText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICUsersIanDocumentsAnWindow : WinWindow
    {
        
        public UICUsersIanDocumentsAnWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ndkLocation";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinText UICUsersIanDocumentsAnText
        {
            get
            {
                if ((this.mUICUsersIanDocumentsAnText == null))
                {
                    this.mUICUsersIanDocumentsAnText = new WinText(this);
                    #region Search Criteria
                    this.mUICUsersIanDocumentsAnText.SearchProperties[WinText.PropertyNames.Name] = "C:\\Users\\Ian\\Documents\\Android\\ndk\\android-ndk-r8d";
                    this.mUICUsersIanDocumentsAnText.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUICUsersIanDocumentsAnText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUICUsersIanDocumentsAnText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIEmulatorDeviceDebuggWindow : WinWindow
    {
        
        public UIEmulatorDeviceDebuggWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label4";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinText UIEmulatorDeviceDebuggText
        {
            get
            {
                if ((this.mUIEmulatorDeviceDebuggText == null))
                {
                    this.mUIEmulatorDeviceDebuggText = new WinText(this);
                    #region Search Criteria
                    this.mUIEmulatorDeviceDebuggText.SearchProperties[WinText.PropertyNames.Name] = "Emulator/Device Debugging";
                    this.mUIEmulatorDeviceDebuggText.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUIEmulatorDeviceDebuggText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIEmulatorDeviceDebuggText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIPreserveapplicationdWindow : WinWindow
    {
        
        public UIPreserveapplicationdWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "preserveDataCheckBox";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIPreserveapplicationdCheckBox
        {
            get
            {
                if ((this.mUIPreserveapplicationdCheckBox == null))
                {
                    this.mUIPreserveapplicationdCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIPreserveapplicationdCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Preserve application data/cache on device between deploys";
                    this.mUIPreserveapplicationdCheckBox.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUIPreserveapplicationdCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIPreserveapplicationdCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIProvidedebugsymbolsfWindow : WinWindow
    {
        
        public UIProvidedebugsymbolsfWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "debugRuntimeCheckBox";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIProvidedebugsymbolsfCheckBox
        {
            get
            {
                if ((this.mUIProvidedebugsymbolsfCheckBox == null))
                {
                    this.mUIProvidedebugsymbolsfCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIProvidedebugsymbolsfCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Provide debug symbols for shared runtime and base class libraries";
                    this.mUIProvidedebugsymbolsfCheckBox.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUIProvidedebugsymbolsfCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIProvidedebugsymbolsfCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIAdditionalEmulatorLaWindow : WinWindow
    {
        
        public UIAdditionalEmulatorLaWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label3";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinText UIAdditionalEmulatorLaText
        {
            get
            {
                if ((this.mUIAdditionalEmulatorLaText == null))
                {
                    this.mUIAdditionalEmulatorLaText = new WinText(this);
                    #region Search Criteria
                    this.mUIAdditionalEmulatorLaText.SearchProperties[WinText.PropertyNames.Name] = "Additional Emulator Launch Arguments:";
                    this.mUIAdditionalEmulatorLaText.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUIAdditionalEmulatorLaText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIAdditionalEmulatorLaText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIEmulatorArgumentsWindow : WinWindow
    {
        
        public UIEmulatorArgumentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "emulatorArguments";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinEdit UIEmulatorArgumentsEdit
        {
            get
            {
                if ((this.mUIEmulatorArgumentsEdit == null))
                {
                    this.mUIEmulatorArgumentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIEmulatorArgumentsEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Additional Emulator Launch Arguments:";
                    this.mUIEmulatorArgumentsEdit.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUIEmulatorArgumentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIEmulatorArgumentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIXamarinforVisualStudWindow : WinWindow
    {
        
        public UIXamarinforVisualStudWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label5";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinText UIXamarinforVisualStudText
        {
            get
            {
                if ((this.mUIXamarinforVisualStudText == null))
                {
                    this.mUIXamarinforVisualStudText = new WinText(this);
                    #region Search Criteria
                    this.mUIXamarinforVisualStudText.SearchProperties[WinText.PropertyNames.Name] = "Xamarin for Visual Studio Updates";
                    this.mUIXamarinforVisualStudText.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUIXamarinforVisualStudText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIXamarinforVisualStudText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UINotifymeaboutWindow : WinWindow
    {
        
        public UINotifymeaboutWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkUpdatesCheckBox";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UINotifymeaboutCheckBox
        {
            get
            {
                if ((this.mUINotifymeaboutCheckBox == null))
                {
                    this.mUINotifymeaboutCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUINotifymeaboutCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Notify me about ";
                    this.mUINotifymeaboutCheckBox.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUINotifymeaboutCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUINotifymeaboutCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICheckUpdatesLevelWindow : WinWindow
    {
        
        public UICheckUpdatesLevelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkUpdatesLevel";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        
        public WinComboBox UICheckUpdatesLevelComboBox
        {
            get
            {
                if ((this.mUICheckUpdatesLevelComboBox == null))
                {
                    this.mUICheckUpdatesLevelComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUICheckUpdatesLevelComboBox.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUICheckUpdatesLevelComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        
        private WinComboBox mUICheckUpdatesLevelComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICheckNowText : WinText
    {
        
        public UICheckNowText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Check Now";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinHyperlink UICheckNowHyperlink
        {
            get
            {
                if ((this.mUICheckNowHyperlink == null))
                {
                    this.mUICheckNowHyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUICheckNowHyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "Check Now";
                    this.mUICheckNowHyperlink.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUICheckNowHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mUICheckNowHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UINohostconnectedWindow : WinWindow
    {
        
        public UINohostconnectedWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lbl";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinText UINohostconnectedText
        {
            get
            {
                if ((this.mUINohostconnectedText == null))
                {
                    this.mUINohostconnectedText = new WinText(this);
                    #region Search Criteria
                    this.mUINohostconnectedText.SearchProperties[WinText.PropertyNames.Name] = "No host connected";
                    this.mUINohostconnectedText.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUINohostconnectedText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUINohostconnectedText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFindMacBuildHostWindow : WinWindow
    {
        
        public UIFindMacBuildHostWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnDiscover";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinButton UIFindMacBuildHostButton
        {
            get
            {
                if ((this.mUIFindMacBuildHostButton == null))
                {
                    this.mUIFindMacBuildHostButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIFindMacBuildHostButton.SearchProperties[WinButton.PropertyNames.Name] = "Find Mac Build Host";
                    this.mUIFindMacBuildHostButton.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUIFindMacBuildHostButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIFindMacBuildHostButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISDKSynchronizationWindow : WinWindow
    {
        
        public UISDKSynchronizationWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label6";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinText UISDKSynchronizationText
        {
            get
            {
                if ((this.mUISDKSynchronizationText == null))
                {
                    this.mUISDKSynchronizationText = new WinText(this);
                    #region Search Criteria
                    this.mUISDKSynchronizationText.SearchProperties[WinText.PropertyNames.Name] = "SDK Synchronization";
                    this.mUISDKSynchronizationText.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUISDKSynchronizationText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUISDKSynchronizationText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIAppleSDKWindow : WinWindow
    {
        
        public UIAppleSDKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "appleSDKLabel";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinText UIAppleSDKText
        {
            get
            {
                if ((this.mUIAppleSDKText == null))
                {
                    this.mUIAppleSDKText = new WinText(this);
                    #region Search Criteria
                    this.mUIAppleSDKText.SearchProperties[WinText.PropertyNames.Name] = "Apple SDK";
                    this.mUIAppleSDKText.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUIAppleSDKText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIAppleSDKText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIXcodepathegApplicatiWindow : WinWindow
    {
        
        public UIXcodepathegApplicatiWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "xcodeHintLabel";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinText UIXcodepathegApplicatiText
        {
            get
            {
                if ((this.mUIXcodepathegApplicatiText == null))
                {
                    this.mUIXcodepathegApplicatiText = new WinText(this);
                    #region Search Criteria
                    this.mUIXcodepathegApplicatiText.SearchProperties[WinText.PropertyNames.Name] = "Xcode path (e.g: \"/Applications/Xcode.app\", blank to use default Xcode):";
                    this.mUIXcodepathegApplicatiText.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUIXcodepathegApplicatiText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIXcodepathegApplicatiText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITxtXcodeHintWindow : WinWindow
    {
        
        public UITxtXcodeHintWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ControlName, "txt", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtXcodeHintEdit
        {
            get
            {
                if ((this.mUITxtXcodeHintEdit == null))
                {
                    this.mUITxtXcodeHintEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtXcodeHintEdit.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUITxtXcodeHintEdit.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
                    #endregion
                }
                return this.mUITxtXcodeHintEdit;
            }
        }
        
        public WinEdit UITxtXcodeHintEdit1
        {
            get
            {
                if ((this.mUITxtXcodeHintEdit1 == null))
                {
                    this.mUITxtXcodeHintEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtXcodeHintEdit1.SearchProperties.Add(new PropertyExpression(WinEdit.PropertyNames.Name, "Xcode path (e.g: \"/Applications/Xcode.app\", blank to use default Xcode):", PropertyExpressionOperator.Contains));
                    this.mUITxtXcodeHintEdit1.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUITxtXcodeHintEdit1.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
                    #endregion
                }
                return this.mUITxtXcodeHintEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtXcodeHintEdit;
        
        private WinEdit mUITxtXcodeHintEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITxtXcodeHintWindow1 : WinWindow
    {
        
        public UITxtXcodeHintWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtXcodeHint";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtXcodeHintEdit
        {
            get
            {
                if ((this.mUITxtXcodeHintEdit == null))
                {
                    this.mUITxtXcodeHintEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtXcodeHintEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Xcode path (e.g: \"/Applications/Xcode.app\", blank to use default Xcode):";
                    this.mUITxtXcodeHintEdit.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUITxtXcodeHintEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtXcodeHintEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISelectAndroidSDKWindow : WinWindow
    {
        
        public UISelectAndroidSDKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Select Android SDK";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Select Android SDK");
            #endregion
        }
        
        #region Properties
        public UICUsersIanAppDataLocaWindow1 UICUsersIanAppDataLocaWindow
        {
            get
            {
                if ((this.mUICUsersIanAppDataLocaWindow == null))
                {
                    this.mUICUsersIanAppDataLocaWindow = new UICUsersIanAppDataLocaWindow1(this);
                }
                return this.mUICUsersIanAppDataLocaWindow;
            }
        }
        
        public UIOKWindow2 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow2(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UICancelWindow1 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow1(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICUsersIanAppDataLocaWindow1 mUICUsersIanAppDataLocaWindow;
        
        private UIOKWindow2 mUIOKWindow;
        
        private UICancelWindow1 mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICUsersIanAppDataLocaWindow1 : WinWindow
    {
        
        public UICUsersIanAppDataLocaWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox1";
            this.WindowTitles.Add("Select Android SDK");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox1Edit
        {
            get
            {
                if ((this.mUITextBox1Edit == null))
                {
                    this.mUITextBox1Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox1Edit.SearchProperties[WinEdit.PropertyNames.Name] = "SDK Path:";
                    this.mUITextBox1Edit.WindowTitles.Add("Select Android SDK");
                    #endregion
                }
                return this.mUITextBox1Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox1Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow2 : WinWindow
    {
        
        public UIOKWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button_ok";
            this.WindowTitles.Add("Select Android SDK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Select Android SDK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICancelWindow1 : WinWindow
    {
        
        public UICancelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button_cancel";
            this.WindowTitles.Add("Select Android SDK");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Select Android SDK");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIInvalidSDKWindow : WinWindow
    {
        
        public UIInvalidSDKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Invalid SDK";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Invalid SDK");
            #endregion
        }
        
        #region Properties
        public UIOKWindow3 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow3(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow3 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow3 : WinWindow
    {
        
        public UIOKWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("Invalid SDK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Invalid SDK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
